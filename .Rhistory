deltaU = 0.223, n1 = 12, n2 = 12, alpha = 0.05, seed = 1, sobol = 4)
library(devtools)
devtools::check()
build_manual()
devtools::check()
library(devtools)
devtools::check()
build_manual()
library(devtools)
devtools::check()
build_manual()
check()
build_manual()
library(devtools)
devtools::check()
build_manual()
AnalyzeTwoSample <- function(x = NULL, y = NULL, type = "welch", deltaL = -Inf,
deltaU = Inf, alpha = NULL){
## error checking
if(!is.numeric(x) | length(x) < 2) {
return("Error: Please specify a valid input for data x.")}
else if (sum(is.na(x)) > 0){
return("Error: Please specify a valid input for data x.")}
else if (stats::var(x) == 0){
return("Error: Please specify a valid input for data x.")}
if(!is.numeric(y) | length(y) < 2) {
return("Error: Please specify a valid input for data y.")}
else if (sum(is.na(y)) > 0){
return("Error: Please specify a valid input for data y.")}
else if (stats::var(y) == 0){
return("Error: Please specify a valid input for data y.")}
if (length(x) != length(y)){
return("Error: Please ensure x and y have the same number of observations.")}
if(!is.numeric(deltaL) | length(deltaL) != 1){
return("Error: Please specify a valid number for deltaL.")}
if(!is.numeric(deltaU) | length(deltaU) != 1){
return("Error: Please specify a valid number for deltaU.")}
if(deltaL == -Inf & deltaU == Inf){
return("Error: Please specify valid interval endpoints deltaL and deltaU.")}
if (deltaL >= deltaU){
return("Error: Please specify valid interval endpoints deltaL and deltaU.")}
if(!is.numeric(alpha) | length(alpha) != 1) {
return("Error: Please specify a valid number for alpha.")}
if (is.numeric(alpha)){
if (alpha <= 0 | alpha >= 1){
return("Error: Please specify a valid number for alpha.")}
}
if(!(type %in% c("welch", "student", "paired"))){
return("Error: Please specify a valid type for the t-test(s).")}
if (is.finite(deltaL) & is.finite(deltaU)){
t1 <- stats::t.test(x, y, mu = deltaL, alternative = "greater")
t2 <- stats::t.test(x, y, mu = deltaU, alternative = "less")
tab <- data.frame(t = c(t1$statistic, t2$statistic),
SE = c(t1$stderr, t2$stderr),
df = c(t1$parameter, t2$parameter),
p.value= c(t1$p.value, t2$p.value))
row.names(tab) <- c("Lower Bound", "Upper Bound")
}
else if (is.finite(deltaL)){
t1 <- stats::t.test(x, y, mu = deltaL, alternative = "greater")
tab <- data.frame(t = t1$statistic, SE = t1$stderr, df = t1$parameter, p.value = t1$p.value)
row.names(tab) <- "Lower Bound"
}
else {
t2 <- stats::t.test(x, y, mu = deltaU, alternative = "less")
tab <- data.frame(t = t2$statistic, SE = t2$stderr, df = t2$parameter, p.value = t2$p.value)
row.names(tab) <- "Upper Bound"
}
METHOD <- "Welch's Two-Sample t-test"
typehyp <- ifelse(is.finite(deltaL) & is.finite(deltaU), "a",
ifelse(!is.finite(deltaL), "b", "c"))
test <- paste0(switch(typehyp, a = "Equivalence test with (deltaL, deltaU) = (",
b = "Noninferiority test for group 2 with (deltaL, deltaU) = (",
c = "Noninferiority test for group 1 with (deltaL, deltaU) = ("), round(deltaL, 4), ",", round(deltaU,4), ")")
summary <- paste0(ifelse(max(tab$p.value) <= alpha, "Conclude ", "Do not conclude "),
switch(typehyp, a = "equivalence.",
b = "noninferiority for group 2.",
c = "noninferiority for group 1."))
results <- structure(list(test = test, table = tab, summary = summary,
sig.level = round(alpha,4),
method = METHOD), class = "en.test")
return(results)
}
print.en.test <- function(obj){
cat(obj$method, "\n",
obj$test, "\n",
"Significance Level: ", obj$sig.level, "\n", "\n", "Results", "\n", sep = "")
print(as.matrix(obj$table),quote=F)
cat("\n", "Summary", "\n", obj$summary, sep = "")
}
AnalyzeTwoSample(x = rnorm(15), y = rnorm(15), deltaL = -1, deltaU = 1, alpha = 0.05)
xx = rnorm(15)
yy = rnorm(15)
AnalyzeTwoSample(x = xx, y = yy, deltaL = -1, deltaU = 1, alpha = 0.05)
t.test(xx,yy, mu = -1, alternative = "greater")
t.test(xx,yy, mu = 1, alternative = "less")
?t.test
t.test(xx,yy, mu = 1, alternative = "less", paired = TRUE)
t.test(xx,yy, mu = 1, alternative = "less", paired = TRUE, var.equal = TRUE)
AnalyzeTwoSample <- function(x = NULL, y = NULL, type = "welch", deltaL = -Inf,
deltaU = Inf, alpha = NULL){
## error checking
if(!is.numeric(x) | length(x) < 2) {
return("Error: Please specify a valid input for data x.")}
else if (sum(is.na(x)) > 0){
return("Error: Please specify a valid input for data x.")}
else if (stats::var(x) == 0){
return("Error: Please specify a valid input for data x.")}
if(!is.numeric(y) | length(y) < 2) {
return("Error: Please specify a valid input for data y.")}
else if (sum(is.na(y)) > 0){
return("Error: Please specify a valid input for data y.")}
else if (stats::var(y) == 0){
return("Error: Please specify a valid input for data y.")}
if (length(x) != length(y)){
return("Error: Please ensure x and y have the same number of observations.")}
if(!is.numeric(deltaL) | length(deltaL) != 1){
return("Error: Please specify a valid number for deltaL.")}
if(!is.numeric(deltaU) | length(deltaU) != 1){
return("Error: Please specify a valid number for deltaU.")}
if(deltaL == -Inf & deltaU == Inf){
return("Error: Please specify valid interval endpoints deltaL and deltaU.")}
if (deltaL >= deltaU){
return("Error: Please specify valid interval endpoints deltaL and deltaU.")}
if(!is.numeric(alpha) | length(alpha) != 1) {
return("Error: Please specify a valid number for alpha.")}
if (is.numeric(alpha)){
if (alpha <= 0 | alpha >= 1){
return("Error: Please specify a valid number for alpha.")}
}
if(!(type %in% c("welch", "student", "paired"))){
return("Error: Please specify a valid type for the t-test(s).")}
if (is.finite(deltaL) & is.finite(deltaU)){
t1 <- stats::t.test(x, y, mu = deltaL, alternative = "greater", var.equal = ifelse(type == "student", TRUE, FALSE),
paired = ifelse(type == "paired", TRUE, FALSE))
t2 <- stats::t.test(x, y, mu = deltaU, alternative = "less")
tab <- data.frame(t = c(t1$statistic, t2$statistic),
SE = c(t1$stderr, t2$stderr),
df = c(t1$parameter, t2$parameter),
p.value= c(t1$p.value, t2$p.value))
row.names(tab) <- c("Lower Bound", "Upper Bound")
}
else if (is.finite(deltaL)){
t1 <- stats::t.test(x, y, mu = deltaL, alternative = "greater")
tab <- data.frame(t = t1$statistic, SE = t1$stderr, df = t1$parameter, p.value = t1$p.value)
row.names(tab) <- "Lower Bound"
}
else {
t2 <- stats::t.test(x, y, mu = deltaU, alternative = "less")
tab <- data.frame(t = t2$statistic, SE = t2$stderr, df = t2$parameter, p.value = t2$p.value)
row.names(tab) <- "Upper Bound"
}
METHOD <- "Welch's Two-Sample t-test"
typehyp <- ifelse(is.finite(deltaL) & is.finite(deltaU), "a",
ifelse(!is.finite(deltaL), "b", "c"))
test <- paste0(switch(typehyp, a = "Equivalence test with (deltaL, deltaU) = (",
b = "Noninferiority test for group 2 with (deltaL, deltaU) = (",
c = "Noninferiority test for group 1 with (deltaL, deltaU) = ("), round(deltaL, 4), ",", round(deltaU,4), ")")
summary <- paste0(ifelse(max(tab$p.value) <= alpha, "Conclude ", "Do not conclude "),
switch(typehyp, a = "equivalence.",
b = "noninferiority for group 2.",
c = "noninferiority for group 1."))
results <- structure(list(test = test, table = tab, summary = summary,
sig.level = round(alpha,4),
method = METHOD), class = "en.test")
return(results)
}
AnalyzeTwoSample(x = xx, y = yy, deltaL = -1, deltaU = 1, alpha = 0.05)
AnalyzeTwoSample <- function(x = NULL, y = NULL, type = "welch", deltaL = -Inf,
deltaU = Inf, alpha = NULL){
## error checking
if(!is.numeric(x) | length(x) < 2) {
return("Error: Please specify a valid input for data x.")}
else if (sum(is.na(x)) > 0){
return("Error: Please specify a valid input for data x.")}
else if (stats::var(x) == 0){
return("Error: Please specify a valid input for data x.")}
if(!is.numeric(y) | length(y) < 2) {
return("Error: Please specify a valid input for data y.")}
else if (sum(is.na(y)) > 0){
return("Error: Please specify a valid input for data y.")}
else if (stats::var(y) == 0){
return("Error: Please specify a valid input for data y.")}
if (length(x) != length(y)){
return("Error: Please ensure x and y have the same number of observations.")}
if(!is.numeric(deltaL) | length(deltaL) != 1){
return("Error: Please specify a valid number for deltaL.")}
if(!is.numeric(deltaU) | length(deltaU) != 1){
return("Error: Please specify a valid number for deltaU.")}
if(deltaL == -Inf & deltaU == Inf){
return("Error: Please specify valid interval endpoints deltaL and deltaU.")}
if (deltaL >= deltaU){
return("Error: Please specify valid interval endpoints deltaL and deltaU.")}
if(!is.numeric(alpha) | length(alpha) != 1) {
return("Error: Please specify a valid number for alpha.")}
if (is.numeric(alpha)){
if (alpha <= 0 | alpha >= 1){
return("Error: Please specify a valid number for alpha.")}
}
if(!(type %in% c("welch", "student", "paired"))){
return("Error: Please specify a valid type for the t-test(s).")}
if (is.finite(deltaL) & is.finite(deltaU)){
t1 <- stats::t.test(x, y, mu = deltaL, alternative = "greater", var.equal = ifelse(type == "student", TRUE, FALSE),
paired = ifelse(type == "paired", TRUE, FALSE))
t2 <- stats::t.test(x, y, mu = deltaU, alternative = "less", var.equal = ifelse(type == "student", TRUE, FALSE),
paired = ifelse(type == "paired", TRUE, FALSE))
tab <- data.frame(t = c(t1$statistic, t2$statistic),
SE = c(t1$stderr, t2$stderr),
df = c(t1$parameter, t2$parameter),
p.value= c(t1$p.value, t2$p.value))
row.names(tab) <- c("Lower Bound", "Upper Bound")
}
else if (is.finite(deltaL)){
t1 <- stats::t.test(x, y, mu = deltaL, alternative = "greater", var.equal = ifelse(type == "student", TRUE, FALSE),
paired = ifelse(type == "paired", TRUE, FALSE))
tab <- data.frame(t = t1$statistic, SE = t1$stderr, df = t1$parameter, p.value = t1$p.value)
row.names(tab) <- "Lower Bound"
}
else {
t2 <- stats::t.test(x, y, mu = deltaU, alternative = "less", var.equal = ifelse(type == "student", TRUE, FALSE),
paired = ifelse(type == "paired", TRUE, FALSE))
tab <- data.frame(t = t2$statistic, SE = t2$stderr, df = t2$parameter, p.value = t2$p.value)
row.names(tab) <- "Upper Bound"
}
METHOD <-  switch(type, welch = "Welch's Two-Sample t-test",
student = "Student's Two-Sample t-test",
c = "Paired Two-Sample t-test")
typehyp <- ifelse(is.finite(deltaL) & is.finite(deltaU), "a",
ifelse(!is.finite(deltaL), "b", "c"))
test <- paste0(switch(typehyp, a = "Equivalence test with (deltaL, deltaU) = (",
b = "Noninferiority test for group 2 with (deltaL, deltaU) = (",
c = "Noninferiority test for group 1 with (deltaL, deltaU) = ("), round(deltaL, 4), ",", round(deltaU,4), ")")
summary <- paste0(ifelse(max(tab$p.value) <= alpha, "Conclude ", "Do not conclude "),
switch(typehyp, a = "equivalence.",
b = "noninferiority for group 2.",
c = "noninferiority for group 1."))
results <- structure(list(test = test, table = tab, summary = summary,
sig.level = round(alpha,4),
method = METHOD), class = "en.test")
return(results)
}
AnalyzeTwoSample(x = xx, y = yy, deltaL = -1, deltaU = 1, alpha = 0.05)
AnalyzeTwoSample(x = xx, y = yy, deltaL = -1, deltaU = 1, alpha = 0.05, type = "paired")
AnalyzeTwoSample(x = xx, y = yy, deltaL = -1, deltaU = 1, alpha = 0.05, type = "student")
AnalyzeTwoSample(x = xx, y = yy, deltaL = -Inf, deltaU = 1, alpha = 0.05, type = "student")
AnalyzeTwoSample(x = xx, y = yy, deltaL = -1, deltaU = Inf, alpha = 0.05, type = "student")
library(devtools)
devtools::check()
build_manual()
ns = 16
for (i in 1:length(ns)){
n <- ns[i]
pwr_data <- NULL
pwr_data2 <- NULL
tU_vec <- NULL
tL_vec <- NULL
mean_vec <- NULL
sd_vec <- NULL
diff1_vec <- NULL
diff2_vec <- NULL; diff3_vec <- NULL
p1 <- NULL; p2 <- NULL; p3 <- NULL; p4 <- NULL
df_vec <- NULL
# set.seed(1)
for (j in 1:1){
n1 <- ceiling(n/2); n2 <- floor(n/2)
Seq <- c(rep(1, n1), rep(2, n2))
y11 <- NULL; y21 <- NULL; resid1 <- NULL
for (i in 1:n1){
resid_joint <- mvrnorm(n = 1, mu = c(0,0), Sigma = rbind(c(varBR, rho*sqrt(varBT)*sqrt(varBR)),
c(rho*sqrt(varBT)*sqrt(varBR), varBT)))
WT_resid <- rnorm(1, 0, sqrt(varWT1))
y11_temp <- mu + F_T + P_1 + Q_1 + resid_joint[2] + WT_resid
y11 <- c(y11, y11_temp)
WR_resid <- rnorm(1, 0, sqrt(varWR1))
y21_temp <- mu + F_R + P_2 + Q_1 + resid_joint[1] + WR_resid
y21 <- c(y21, y21_temp)
resid1 <- rbind(resid1, c(resid_joint, WT_resid, WR_resid))
}
y12 <- NULL; y22 <- NULL; resid2 <- NULL
for (i in 1:n2){
resid_joint <- mvrnorm(n = 1, mu = c(0,0), Sigma = rbind(c(varBR, rho*sqrt(varBT)*sqrt(varBR)),
c(rho*sqrt(varBT)*sqrt(varBR), varBT)))
WT_resid <- rnorm(1, 0, sqrt(varWT2))
y22_temp <- mu + F_T + P_2 + Q_2 + resid_joint[1] + WT_resid
y22 <- c(y22, y22_temp)
WR_resid <- rnorm(1, 0, sqrt(varWR2))
y12_temp <- mu + F_R + P_1 + Q_2 + resid_joint[2] + WR_resid
y12 <- c(y12, y12_temp)
resid2 <- rbind(resid2, c(resid_joint, WT_resid, WR_resid))
}
# y_bar <- 0.5*(mean(y11) - mean(y12) - mean(y21) + mean(y22))
# mean_vec[j] <- y_bar
diff1 <- 0.5*(y11 - y21); diff2 <- 0.5*(y12 - y22)
diff1_vec[j] <- sd(diff1); diff2_vec[j] <- sd(diff2)
diff3_vec[j] <- mean(diff1) - mean(diff2)
# var11 <- ((n1-1)*var(diff1) + (n2-1)*var(diff2))/(n1 + n2 - 2)
# sd_vec[j] <- sqrt(var11)
p1[j] <- t.test(diff1, diff2, "greater", mu = El, conf.level = 1 - 2*alpha, var.equal = TRUE)$p.value
p2[j] <- t.test(diff1, diff2, "less", mu = Eu, conf.level = 1 - 2*alpha, var.equal = TRUE)$p.value
p3[j] <- t.test(diff1, diff2, "greater", mu = El, conf.level = 1 - 2*alpha)$p.value
p4[j] <- t.test(diff1, diff2, "less", mu = Eu, conf.level = 1 - 2*alpha)$p.value
df_vec[j] <- as.numeric(t.test(diff1, diff2, "less", mu = Eu, conf.level = 1 - 2*alpha)$parameter)
# tU <- -2*(y_bar - Eu)/(sqrt(var11*(1/n1 + 1/n2))); tL <- 2*(y_bar - El)/(sqrt(var11*(1/n1 + 1/n2)))
# tU_vec[j] <- tU; tL_vec[j] <- tL
pwr_data[j] <- ifelse(p1[j] < alpha, p2[j] < alpha, 0)
pwr_data2[j] <- ifelse(p3[j] < alpha, p4[j] < alpha, 0)
}
mean(pwr_data); mean(pwr_data2)
}
library(MASS)
alpha <- 0.05
Eu <- 0.223; El <- -0.223
mu <- 0
F_T <- 0.025; F_R <- -0.025
P_1 <- 0.25; P_2 <- -0.25
Q_1 <- -0.15; Q_2 <- 0.15
varBT <- 0.05
varBR <- 0.05
rho <- 0.2
varD <- varBT + varBR - 2*rho*sqrt(varBT)*sqrt(varBR)
varWT1 <- (0.16 - varD)/2
varWR1 <- (0.16 - varD)/2
varWT2 <- (0.09 - varD)/2
varWR2 <- (0.09 - varD)/2
for (i in 1:length(ns)){
n <- ns[i]
pwr_data <- NULL
pwr_data2 <- NULL
tU_vec <- NULL
tL_vec <- NULL
mean_vec <- NULL
sd_vec <- NULL
diff1_vec <- NULL
diff2_vec <- NULL; diff3_vec <- NULL
p1 <- NULL; p2 <- NULL; p3 <- NULL; p4 <- NULL
df_vec <- NULL
# set.seed(1)
for (j in 1:1){
n1 <- ceiling(n/2); n2 <- floor(n/2)
Seq <- c(rep(1, n1), rep(2, n2))
y11 <- NULL; y21 <- NULL; resid1 <- NULL
for (i in 1:n1){
resid_joint <- mvrnorm(n = 1, mu = c(0,0), Sigma = rbind(c(varBR, rho*sqrt(varBT)*sqrt(varBR)),
c(rho*sqrt(varBT)*sqrt(varBR), varBT)))
WT_resid <- rnorm(1, 0, sqrt(varWT1))
y11_temp <- mu + F_T + P_1 + Q_1 + resid_joint[2] + WT_resid
y11 <- c(y11, y11_temp)
WR_resid <- rnorm(1, 0, sqrt(varWR1))
y21_temp <- mu + F_R + P_2 + Q_1 + resid_joint[1] + WR_resid
y21 <- c(y21, y21_temp)
resid1 <- rbind(resid1, c(resid_joint, WT_resid, WR_resid))
}
y12 <- NULL; y22 <- NULL; resid2 <- NULL
for (i in 1:n2){
resid_joint <- mvrnorm(n = 1, mu = c(0,0), Sigma = rbind(c(varBR, rho*sqrt(varBT)*sqrt(varBR)),
c(rho*sqrt(varBT)*sqrt(varBR), varBT)))
WT_resid <- rnorm(1, 0, sqrt(varWT2))
y22_temp <- mu + F_T + P_2 + Q_2 + resid_joint[1] + WT_resid
y22 <- c(y22, y22_temp)
WR_resid <- rnorm(1, 0, sqrt(varWR2))
y12_temp <- mu + F_R + P_1 + Q_2 + resid_joint[2] + WR_resid
y12 <- c(y12, y12_temp)
resid2 <- rbind(resid2, c(resid_joint, WT_resid, WR_resid))
}
# y_bar <- 0.5*(mean(y11) - mean(y12) - mean(y21) + mean(y22))
# mean_vec[j] <- y_bar
diff1 <- 0.5*(y11 - y21); diff2 <- 0.5*(y12 - y22)
diff1_vec[j] <- sd(diff1); diff2_vec[j] <- sd(diff2)
diff3_vec[j] <- mean(diff1) - mean(diff2)
# var11 <- ((n1-1)*var(diff1) + (n2-1)*var(diff2))/(n1 + n2 - 2)
# sd_vec[j] <- sqrt(var11)
p1[j] <- t.test(diff1, diff2, "greater", mu = El, conf.level = 1 - 2*alpha, var.equal = TRUE)$p.value
p2[j] <- t.test(diff1, diff2, "less", mu = Eu, conf.level = 1 - 2*alpha, var.equal = TRUE)$p.value
p3[j] <- t.test(diff1, diff2, "greater", mu = El, conf.level = 1 - 2*alpha)$p.value
p4[j] <- t.test(diff1, diff2, "less", mu = Eu, conf.level = 1 - 2*alpha)$p.value
df_vec[j] <- as.numeric(t.test(diff1, diff2, "less", mu = Eu, conf.level = 1 - 2*alpha)$parameter)
# tU <- -2*(y_bar - Eu)/(sqrt(var11*(1/n1 + 1/n2))); tL <- 2*(y_bar - El)/(sqrt(var11*(1/n1 + 1/n2)))
# tU_vec[j] <- tU; tL_vec[j] <- tL
pwr_data[j] <- ifelse(p1[j] < alpha, p2[j] < alpha, 0)
pwr_data2[j] <- ifelse(p3[j] < alpha, p4[j] < alpha, 0)
}
mean(pwr_data); mean(pwr_data2)
print(c(n, mean(pwr_data2)))
pwr_vec <- c(pwr_vec, mean(pwr_data))
}
diff1
diff2
p1
t.test(diff1, diff2, "greater", mu = El, conf.level = 1 - 2*alpha)$p.value
t.test(diff1, diff2, "greater", mu = El, conf.level = 1 - 2*alpha)
t.test(diff1, diff2, "less", mu = Eu, conf.level = 1 - 2*alpha)
AnalyzeCrossover(x = 2*diff1, y = 2*diff2, type = "welch", deltaL = -0.223,
deltaU = 0.223, alpha = 0.05)
AnalyzeCrossover <- function(x = NULL, y = NULL, type = "welch", deltaL = -Inf,
deltaU = Inf, alpha = NULL){
## error checking
if(!is.numeric(x) | length(x) < 2) {
return("Error: Please specify a valid input for data x.")}
else if (sum(is.na(x)) > 0){
return("Error: Please specify a valid input for data x.")}
else if (stats::var(x) == 0){
return("Error: Please specify a valid input for data x.")}
if(!is.numeric(y) | length(y) < 2) {
return("Error: Please specify a valid input for data y.")}
else if (sum(is.na(y)) > 0){
return("Error: Please specify a valid input for data y.")}
else if (stats::var(y) == 0){
return("Error: Please specify a valid input for data y.")}
if (length(x) != length(y)){
return("Error: Please ensure x and y have the same number of observations.")}
if(!is.numeric(deltaL) | length(deltaL) != 1){
return("Error: Please specify a valid number for deltaL.")}
if(!is.numeric(deltaU) | length(deltaU) != 1){
return("Error: Please specify a valid number for deltaU.")}
if(deltaL == -Inf & deltaU == Inf){
return("Error: Please specify valid interval endpoints deltaL and deltaU.")}
if (deltaL >= deltaU){
return("Error: Please specify valid interval endpoints deltaL and deltaU.")}
if(!is.numeric(alpha) | length(alpha) != 1) {
return("Error: Please specify a valid number for alpha.")}
if (is.numeric(alpha)){
if (alpha <= 0 | alpha >= 1){
return("Error: Please specify a valid number for alpha.")}
}
if(!(type %in% c("welch", "student"))){
return("Error: Please specify a valid type for the t-test(s).")}
x <- x/2; y <- y/2
if (is.finite(deltaL) & is.finite(deltaU)){
t1 <- stats::t.test(x, y, mu = deltaL, alternative = "greater", var.equal = ifelse(type == "student", TRUE, FALSE))
t2 <- stats::t.test(x, y, mu = deltaU, alternative = "less", var.equal = ifelse(type == "student", TRUE, FALSE))
tab <- data.frame(t = c(t1$statistic, t2$statistic),
SE = c(t1$stderr, t2$stderr),
df = c(t1$parameter, t2$parameter),
p.value= c(t1$p.value, t2$p.value))
row.names(tab) <- c("Lower Bound", "Upper Bound")
}
else if (is.finite(deltaL)){
t1 <- stats::t.test(x, y, mu = deltaL, alternative = "greater", var.equal = ifelse(type == "student", TRUE, FALSE))
tab <- data.frame(t = t1$statistic, SE = t1$stderr, df = t1$parameter, p.value = t1$p.value)
row.names(tab) <- "Lower Bound"
}
else {
t2 <- stats::t.test(x, y, mu = deltaU, alternative = "less", var.equal = ifelse(type == "student", TRUE, FALSE))
tab <- data.frame(t = t2$statistic, SE = t2$stderr, df = t2$parameter, p.value = t2$p.value)
row.names(tab) <- "Upper Bound"
}
METHOD <-  switch(type, welch = "Welch's Two-Sample t-test",
student = "Student's Two-Sample t-test")
typehyp <- ifelse(is.finite(deltaL) & is.finite(deltaU), "a",
ifelse(!is.finite(deltaL), "b", "c"))
test <- paste0(switch(typehyp, a = "Equivalence test with (deltaL, deltaU) = (",
b = "Noninferiority test for group 2 with (deltaL, deltaU) = (",
c = "Noninferiority test for group 1 with (deltaL, deltaU) = ("), round(deltaL, 4), ",", round(deltaU,4), ")")
summary <- paste0(ifelse(max(tab$p.value) <= alpha, "Conclude ", "Do not conclude "),
switch(typehyp, a = "equivalence.",
b = "noninferiority for group 2.",
c = "noninferiority for group 1."))
results <- structure(list(test = test, table = tab, summary = summary,
sig.level = round(alpha,4),
method = METHOD), class = "en.test")
return(results)
}
> AnalyzeCrossover(x = 2*diff1, y = 2*diff2, type = "welch", deltaL = -0.223,
deltaU = 0.223, alpha = 0.05)
AnalyzeCrossover(x = 2*diff1, y = 2*diff2, type = "welch", deltaL = -0.223,
deltaU = 0.223, alpha = 0.05)
library(devtools)
devtools::check()
build_manual()
library(devtools)
devtools::check()
build_manual()
library(dent)
DesignCrossoverUnequal(diff = -4, sigma1 = 15, sigma2 = 18, deltaL = -19.2, deltaU = 19.2, alpha = 0.05, targetPower = 0.8)
library(devtools)
devtools::check()
library(dent)
AnalyzeTwoSample(x = rnorm(15), y = rnorm(15), type = "welch", deltaL = -Inf,
deltaU = 1, alpha = 0.05)
library(TOSTER)
dent:::print.en.test()
dent:::print.en.test
?dent:::print.en.test
?print.en.test
?DesignCrossoverEqual
?TOSTER:::print.TOSTt
?dent:::print.en.test
?print.TOSTt
devtools::check()
build_manual()
libary(devtools)
library(devtools)
build_manual()
library(dent)
AnalyzeTwoSample(x = rnorm(15), y = rnorm(15), type = "welch", deltaL = -Inf,
deltaU = 1, alpha = 0.05)
devtools::check()
?print
library(dent)
AnalyzeTwoSample(x = rnorm(15), y = rnorm(15), type = "welch", deltaL = -Inf,
deltaU = 1, alpha = 0.05)
library(devtools)
devtools::check()
library(dent)
AnalyzeTwoSample(x = rnorm(15), y = rnorm(15), type = "welch", deltaL = -Inf,
deltaU = 1, alpha = 0.05)
library(devtools)
devtools::check()
build_manual()
library(dent)
dent:::print.en.test()
?dent:::print.en.test
